/// 该文件将解析Someip格式的报文，支持Someip、Someip-SD、Someip-TP三种类型。
/// 参考文档：
/// ① https://www.autosar.org/fileadmin/standards/R22-11/FO/AUTOSAR_PRS_SOMEIPProtocol.pdf
/// ② https://www.autosar.org/fileadmin/standards/R22-11/FO/AUTOSAR_PRS_SOMEIPServiceDiscoveryProtocol.pdf
/// 首先是Someip基本报文，由MessageID、Length、RequestID、ProtocolVersion、InterfaceVersion、MessageType、ReturnCode组成
/// 后续的payload按照不同的类型进行区分
/// TP类型报文，在MessageType字段有标志位进行区分
/// TP类型带有Offset、MoreSegmentsFlag，后接payload
/// SD类型报文，在MessageID中进行区分
/// SD类型报文，带有Flags、EntriesArrayLength、Entries、OptionsArrayLength、Options
use core::fmt;

use pnet::packet::PrimitiveValues;
use pnet_macros::{packet, Packet};
use pnet_macros_support::{packet::*, types::*};

/// -----------------------------------------------------------------------------------------------
/// Someip PROTOCOL VERSION (only 1)
/// -----------------------------------------------------------------------------------------------

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct SomeipProtocolVersion(pub u8);

impl SomeipProtocolVersion {
    pub fn new(value: u8) -> SomeipProtocolVersion {
        SomeipProtocolVersion(value)
    }
}

impl PrimitiveValues for SomeipProtocolVersion {
    type T = (u8,);
    fn to_primitive_values(&self) -> Self::T {
        (self.0,)
    }
}

// impl FiniteValues for SomeipProtocolVersion {
//     fn check_valid(&self) -> bool {
//         *self == SomeipProtocolVersion(0x01)
//     }
// }

// impl fmt::Display for SomeipProtocolVersion {
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
//         write!(
//             f,
//             "{}",
//             match self.check_valid() {
//                 true => "Someip Protocol Version 1",
//                 false => "unknown",
//             }
//         )
//     }
// }

/// -----------------------------------------------------------------------------------------------
/// Someip Message Type
/// -----------------------------------------------------------------------------------------------

#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub mod SomeipMessageTypes {
    use super::SomeipMessageType;

    pub const Request: SomeipMessageType = SomeipMessageType(0x00);
    pub const RequestNoReturn: SomeipMessageType = SomeipMessageType(0x01);
    pub const Notification: SomeipMessageType = SomeipMessageType(0x02);
    pub const Response: SomeipMessageType = SomeipMessageType(0x80);
    pub const Error: SomeipMessageType = SomeipMessageType(0x81);
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct SomeipMessageType(pub u8);

impl SomeipMessageType {
    pub fn new(value: u8) -> SomeipMessageType {
        SomeipMessageType(value)
    }
}

impl PrimitiveValues for SomeipMessageType {
    type T = (u8,);
    fn to_primitive_values(&self) -> Self::T {
        (self.0,)
    }
}

// impl FiniteValues for SomeipMessageType {
//     fn check_valid(&self) -> bool {
//         match *self {
//             SomeipMessageTypes::Request
//             | SomeipMessageTypes::RequestNoReturn
//             | SomeipMessageTypes::Notification
//             | SomeipMessageTypes::Response
//             | SomeipMessageTypes::Error => true,
//             _ => false,
//         }
//     }
// }

impl fmt::Display for SomeipMessageType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                &SomeipMessageTypes::Request => "Request",
                &SomeipMessageTypes::RequestNoReturn => "RequestNoReturn",
                &SomeipMessageTypes::Notification => "Notication",
                &SomeipMessageTypes::Response => "Response",
                &SomeipMessageTypes::Error => "Error",
                _ => "unknown",
            }
        )
    }
}

/// -----------------------------------------------------------------------------------------------
/// Someip Return Code
/// -----------------------------------------------------------------------------------------------

#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub mod SomeipReturnCodes {
    use super::SomeipReturnCode;

    pub const E_OK: SomeipReturnCode = SomeipReturnCode(0x00);
    pub const E_NOK: SomeipReturnCode = SomeipReturnCode(0x01);
    pub const E_UNKNOWN_SERVICE: SomeipReturnCode = SomeipReturnCode(0x02);
    pub const E_UNKNOWN_METHOD: SomeipReturnCode = SomeipReturnCode(0x03);
    pub const E_NOT_READY: SomeipReturnCode = SomeipReturnCode(0x04);
    pub const E_NOT_REACHABLE: SomeipReturnCode = SomeipReturnCode(0x05);
    pub const E_TIMEOUT: SomeipReturnCode = SomeipReturnCode(0x06);
    pub const E_WRONG_PROTOCOL_VERSION: SomeipReturnCode = SomeipReturnCode(0x07);
    pub const E_WRONG_INTERFACE_VERSION: SomeipReturnCode = SomeipReturnCode(0x08);
    pub const E_MALFORMED_MESSAGE: SomeipReturnCode = SomeipReturnCode(0x09);
    pub const E_WRONG_MESSAGE_TYPE: SomeipReturnCode = SomeipReturnCode(0x0A);
    pub const E_E2E_REPEATED: SomeipReturnCode = SomeipReturnCode(0x0B);
    pub const E_E2E_WRONG_SEQUENCE: SomeipReturnCode = SomeipReturnCode(0x0C);
    pub const E_E2E: SomeipReturnCode = SomeipReturnCode(0x0D);
    pub const E_E2E_NOT_AVAILABLE: SomeipReturnCode = SomeipReturnCode(0x0E);
    pub const E_E2E_NO_NEW_DATA: SomeipReturnCode = SomeipReturnCode(0x0F);
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct SomeipReturnCode(pub u8);

impl SomeipReturnCode {
    pub fn new(value: u8) -> SomeipReturnCode {
        SomeipReturnCode(value)
    }
}

impl PrimitiveValues for SomeipReturnCode {
    type T = (u8,);
    fn to_primitive_values(&self) -> Self::T {
        (self.0,)
    }
}

impl fmt::Display for SomeipReturnCode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                &SomeipReturnCodes::E_OK => "E_OK",
                &SomeipReturnCodes::E_NOK => "E_NOK",
                &SomeipReturnCodes::E_UNKNOWN_SERVICE => "E_UNKNOWN_SERVICE",
                &SomeipReturnCodes::E_UNKNOWN_METHOD => "E_UNKNOWN_METHOD",
                &SomeipReturnCodes::E_NOT_READY => "E_NOT_READY",
                &SomeipReturnCodes::E_NOT_REACHABLE => "E_NOT_REACHABLE",
                &SomeipReturnCodes::E_TIMEOUT => "E_TIMEOUT",
                &SomeipReturnCodes::E_WRONG_PROTOCOL_VERSION => "E_WRONG_PROTOCOL_VERSION",
                &SomeipReturnCodes::E_WRONG_INTERFACE_VERSION => "E_WRONG_INTERFACE_VERSION",
                &SomeipReturnCodes::E_MALFORMED_MESSAGE => "E_MALFORMED_MESSAGE",
                &SomeipReturnCodes::E_WRONG_MESSAGE_TYPE => "E_WRONG_MESSAGE_TYPE",
                &SomeipReturnCodes::E_E2E_REPEATED => "E_E2E_REPEATED",
                &SomeipReturnCodes::E_E2E_WRONG_SEQUENCE => "E_E2E_WRONG_SEQUENCE",
                &SomeipReturnCodes::E_E2E => "E_E2E",
                &SomeipReturnCodes::E_E2E_NOT_AVAILABLE => "E_E2E_NOT_AVAILABLE",
                &SomeipReturnCodes::E_E2E_NO_NEW_DATA => "E_E2E_NO_NEW_DATA",
                _ => "unknown",
            }
        )
    }
}

/// -----------------------------------------------------------------------------------------------
/// Someip Packet
/// -----------------------------------------------------------------------------------------------

// #[derive(Packet, Debug)]
#[packet]
pub struct Someip {
    #[construct_with(u16)]
    pub service_id: u16be,
    #[construct_with(u16)]
    pub method_id: u16be,
    #[construct_with(u32)]
    pub length: u32be,
    #[construct_with(u16)]
    pub client_id: u16be,
    #[construct_with(u16)]
    pub session_id: u16be,
    #[construct_with(u8)]
    // #[check_valid]
    pub protocol_version: SomeipProtocolVersion,
    #[construct_with(u8)]
    pub interface_version: u8,
    #[construct_with(u8)]
    // #[check_valid]
    pub message_type: SomeipMessageType,
    #[construct_with(u8)]
    pub return_code: SomeipReturnCode,
    #[payload]
    #[length_fn = "someip_length"]
    pub payload: Vec<u8>,
}

fn someip_length(pkt: &SomeipPacket) -> usize {
    if pkt.get_length() > 8 {
        (pkt.get_length() - 8) as usize
    } else {
        0
    }
}

impl<'p> SomeipIterable<'p> {
    pub fn new(buf: &[u8]) -> SomeipIterable {
        SomeipIterable { buf: buf }
    }
}

#[test]
fn one_someip_packet_detect() {
    use std::println;
    let packet = [
        0x10, 0x49, 0x90, 0x0d, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x4e, 0xcd, 0x01, 0x01, 0x02,
        0x00, 0x00,
    ];
    let someippkt = SomeipPacket::new(&packet[..]).unwrap();
    println!("service_id:{:?}", someippkt.get_service_id());
    println!("method_id:{:?}", someippkt.get_method_id());
    println!("length:{:?}", someippkt.get_length());
    println!("client_id:{:?}", someippkt.get_client_id());
    println!("session_id:{:?}", someippkt.get_session_id());
    println!("protocol_version:{:?}", someippkt.get_protocol_version());
    println!("interface_version:{:?}", someippkt.get_interface_version());
    println!("message_type:{:?}", someippkt.get_message_type());
    println!("return_code:{:?}", someippkt.get_return_code());
    println!("payload:{:?}", someippkt.payload());
    println!("packet_size:{:?}", someippkt.packet_size());
}

/// -----------------------------------------------------------------------------------------------
/// Someip SD Entry Type
/// -----------------------------------------------------------------------------------------------

#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub mod SomeipSdEntryTypes {
    // use super::SomeipSdEntryType;

    // pub const Request: SomeipMessageType = SomeipMessageType(0x00);
    // pub const RequestNoReturn: SomeipMessageType = SomeipMessageType(0x01);
    // pub const Notification: SomeipMessageType = SomeipMessageType(0x02);
    // pub const Response: SomeipMessageType = SomeipMessageType(0x80);
    // pub const Error: SomeipMessageType = SomeipMessageType(0x81);
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct SomeipSdEntryType(pub u8);

impl SomeipSdEntryType {
    pub fn new(value: u8) -> SomeipSdEntryType {
        SomeipSdEntryType(value)
    }
}

impl PrimitiveValues for SomeipSdEntryType {
    type T = (u8,);
    fn to_primitive_values(&self) -> Self::T {
        (self.0,)
    }
}

// impl FiniteValues for SomeipSdEntryType {
//     fn check_valid(&self) -> bool {
//         match *self {
//             SomeipMessageTypes::Request
//             | SomeipMessageTypes::RequestNoReturn
//             | SomeipMessageTypes::Notification
//             | SomeipMessageTypes::Response
//             | SomeipMessageTypes::Error => true,
//             _ => false,
//         }
//     }
// }

// impl fmt::Display for SomeipSdEntryType {
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
//         write!(
//             f,
//             "{}",
//             match self {
//                 &SomeipMessageTypes::Request => "Request",
//                 &SomeipMessageTypes::RequestNoReturn => "RequestNoReturn",
//                 &SomeipMessageTypes::Notification => "Notication",
//                 &SomeipMessageTypes::Response => "Response",
//                 &SomeipMessageTypes::Error => "Error",
//                 _ => "unknown",
//             }
//         )
//     }
// }

// / -----------------------------------------------------------------------------------------------
// / Someip SD Entry
// / -----------------------------------------------------------------------------------------------

#[derive(Packet, Debug)]
pub struct SomeipSdEntry {
    #[construct_with(u8)]
    pub sd_entry_type: SomeipSdEntryType,
    pub index_of_1st_options_run: u8,
    pub index_of_2nd_options_run: u8,
    pub number_of_options_1: u4,
    pub number_of_options_2: u4,
    pub service_id: u16be,
    pub instance_id: u16be,
    pub major_version: u8,
    pub ttl: u24be,
    pub minor_version: u32be,
    // pub reserved: u12be,
    // pub counter: u4,
    // pub eventgroup_id: u16be,
    #[payload]
    #[length = "0"]
    pub unused: Vec<u8>,
}

// / -----------------------------------------------------------------------------------------------
// / Someip SD Option （这里不需要关心Option的具体内容，有需要的兄弟后续自己补充吧）
// / -----------------------------------------------------------------------------------------------

// #[derive(Packet, Debug)]
// pub struct SomeipSdOption {
//     pub length: u16be,
//     #[payload]
//     #[length = "length"]
//     pub payload: Vec<u8>,
// }

// / -----------------------------------------------------------------------------------------------
// / Someip SD Packet (Without Someip Packet Header)
// / -----------------------------------------------------------------------------------------------

#[derive(Packet, Debug)]
pub struct SomeipSd {
    pub flags: u8,
    pub reserved: u24be,
    pub entries_length: u32be,
    #[length = "entries_length"]
    pub entries: Vec<SomeipSdEntry>,
    pub options_length: u32be,
    // #[length = "options_length"]
    // pub options: Vec<SomeipSdOption>,
    #[payload]
    #[length = "options_length"]
    pub unused: Vec<u8>,
}

#[test]
fn one_someip_sd_packet_detect() {
    // use pnet_macros_support::packet::Packet;
    use std::println;
    let packet = [
        // 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x05, 0x74, 0x00, 0x00, 0x0c, 0xbe, 0x01, 0x01, 0x02,
        // 0x00,
        0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x01, 0x00, 0x00, 0x10, 0x10, 0xc8, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xd0,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10,
        0xd2, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x10, 0xd3, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00,
        0x10, 0x10, 0xd4, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02,
        0x00, 0x10, 0x10, 0xd5, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x03, 0x00, 0x10, 0x10, 0xd8, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x04, 0x00, 0x10, 0x10, 0xd9, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x05, 0x00, 0x10, 0x10, 0xda, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x06, 0x00, 0x10, 0x10, 0xdc, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x07, 0x00, 0x10, 0x10, 0xdd, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe0, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe1, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe6, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe8, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe9, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xea,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10,
        0xeb, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x10, 0xec, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x10, 0xed, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x08,
        0x00, 0x10, 0x10, 0xee, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x09, 0x00, 0x10, 0x10, 0xef, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x10, 0xf0, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf1, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf2, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x0a, 0x00, 0x10, 0x10, 0xf4, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x0b, 0x00, 0x10, 0x10, 0xf5, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0c, 0x00, 0x10, 0x10, 0xf6, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf7, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0d, 0x00, 0x10, 0x10, 0xf8, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf9, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0e, 0x00, 0x10, 0x10, 0xfa,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10,
        0xfb, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0f, 0x00, 0x10,
        0x10, 0xfc, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x11, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x11, 0x03, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x11, 0x04, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x18, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0c, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0d, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0e, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0f, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x10, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x11, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x12, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x13, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x14,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18,
        0x15, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x18, 0x16, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x18, 0x17, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x18, 0x18, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x18, 0x19, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x18, 0x1a, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x1b, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x21, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x2d, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x2e, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x30, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x3c, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x48, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x4b, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x56,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18,
        0x57, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x18, 0x59, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x18, 0x6c, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x18, 0x6f, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x18, 0x88, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x18, 0xe1, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x02, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x04, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x06, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x09, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x0a, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x0c, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x09, 0x04, 0x00,
        0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0x77, 0x2a, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42,
        0x4f, 0x00, 0x11, 0xc3, 0xb0, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11,
        0xc3, 0xb1, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0x77, 0x25, 0x00,
        0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0xe3, 0x00, 0x09, 0x04, 0x00,
        0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0xe2, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42,
        0x4f, 0x00, 0x06, 0x77, 0x45, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x06,
        0x77, 0x44, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0xe5, 0x00,
        0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x06, 0xc4, 0x3a, 0x00, 0x09, 0x04, 0x00,
        0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0x3d, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42,
        0x4f, 0x00, 0x11, 0xc4, 0x3e, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11,
        0xc4, 0x3b, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0x3c, 0x00,
        0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x06, 0x77, 0x67, 0x00, 0x09, 0x04, 0x00,
        0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0x77, 0x67,
    ];
    let someipsdpkt = SomeipSdPacket::new(&packet[..]).unwrap();
    println!("flags:{:?}", someipsdpkt.get_flags());
    println!("entries_length:{:?}", someipsdpkt.get_entries_length());
    println!("entry[0]:{:?}", someipsdpkt.get_entries()[0]);
    println!("entry[1]:{:?}", someipsdpkt.get_entries()[1]);
    println!("options_length:{:?}", someipsdpkt.get_options_length());
    println!("packet_size:{:?}", someipsdpkt.packet_size());
    println!("----------------");
    println!(
        "entry[1].serviceid:{:?}",
        someipsdpkt.get_entries()[1].service_id
    )
}

// / -----------------------------------------------------------------------------------------------
// / Multi Someip Packet
// / -----------------------------------------------------------------------------------------------

// #[derive(Packet, Debug)]
// pub struct MultiSomeip {
//     #[length_fn = "multi_someip_length"]
//     pub someip: Vec<Someip>,
//     #[payload]
//     #[length = "0"]
//     pub unused: Vec<u8>,
// }

// fn multi_someip_length(pkt: &MultiSomeipPacket) -> usize {
//     pkt.packet().len()
// }

// #[test]
// fn multi_someip_packets_detect() {
//     // use pnet_macros_support::packet::Packet;
//     use std::println;
//     let pkts = [
//         0x10, 0x4a, 0x90, 0x0b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0xa7, 0x00, 0x01, 0x01, 0x02,
//         0x00, 0x01, 0x10, 0x4a, 0x90, 0x0d, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0xa7, 0x01, 0x01,
//         0x01, 0x02, 0x00, 0x01,
//     ];
//     let someippkts = MultiSomeipPacket::new(&pkts[..]).unwrap();
//     println!("{:?}", someippkts.get_someip_raw());
//     let mut iter = someippkts.get_someip_iter();
//     println!("msg1:{:?}", iter.next().unwrap());
//     println!("msg2:{:?}", iter.next().unwrap());
// }

#[test]
fn test_check_if_valid_someip() {
    use std::println;
    // 这里是一个NTP的应用层包
    let pkt1 = [
        0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x6c, 0x2f, 0x7e, 0x3c,
        0xed, 0x91, 0x7c,
    ];
    // 随便复制的一个TCP包
    let pkt2 = [
        0x17, 0x03, 0x03, 0x11, 0x2d, 0xa8, 0x86, 0x4a, 0x70, 0x3c, 0x4d, 0x45, 0xf6, 0xd2, 0x53,
        0xf3, 0x0b, 0x03, 0x26, 0xda, 0x7e, 0x30, 0xe6, 0x51, 0x01, 0x25, 0xab, 0x75, 0xa6, 0x17,
        0x4e, 0xb3, 0x26, 0xbb, 0x66, 0x8e, 0x03, 0xc6, 0x11, 0xad, 0x70, 0xac, 0x05, 0xe1, 0xd3,
        0xf8, 0xc5, 0x99, 0xfb, 0xb8, 0x44, 0x94, 0x52, 0x56, 0x6b, 0xab, 0xfe, 0x0a, 0xd7, 0xd9,
        0x85, 0x18, 0x16, 0xe0, 0x20, 0x84, 0x99, 0x0f, 0xfc, 0x50, 0x4f, 0x5f, 0xd4, 0xd5, 0x41,
        0xb5, 0x0a, 0xf7, 0x03, 0x75, 0x38, 0x41, 0x14, 0x15, 0xec, 0x24, 0x71, 0xad, 0x43, 0xeb,
        0xb2, 0x26, 0xf4, 0x05, 0xc4, 0x1a, 0xbd, 0x96, 0x4d, 0xde, 0x87, 0x1d, 0xde, 0xfc, 0x91,
        0x06, 0x62, 0xef, 0xe8, 0xa5, 0x2d, 0x3f, 0xf5, 0x81, 0xb0, 0xb5, 0xa2, 0x2a, 0x46, 0x6d,
        0xb3, 0x1a, 0x7f, 0x16, 0xce, 0x35, 0x93, 0x04, 0x29, 0xc8, 0xcc, 0x3b, 0x29, 0x59, 0x21,
        0x69, 0x9f, 0xa3, 0x7a, 0x11, 0x3e, 0x60, 0x53, 0x97, 0xc0, 0xfd, 0x8a, 0x41, 0xb2, 0xf5,
        0x9d, 0x87, 0x3a, 0x7c, 0x54, 0x49, 0x1f, 0xf9, 0x22, 0x87, 0x72, 0x61, 0x01, 0x2e, 0xed,
        0xfd, 0x3e, 0x6d, 0xba, 0x2c, 0x0a, 0xa3, 0x06, 0x6f, 0x45, 0x5a, 0xe3, 0x13, 0xf0, 0xca,
        0x56, 0x67, 0xe7, 0x69, 0xfb, 0x56, 0x8b, 0x1b, 0x49, 0xf8, 0xfa, 0xbe, 0x74, 0xf9, 0xa8,
        0xd2, 0x7f, 0x78, 0x9e, 0xd3, 0xc2, 0xa0, 0xe1, 0x2a, 0xde, 0xc3, 0x6d, 0x2f, 0xc8, 0x8f,
        0x03, 0x19, 0xdf, 0x9f, 0x61, 0xd4, 0x73, 0x68, 0x4e, 0x36, 0xd1, 0x00, 0xce, 0x0a, 0x9f,
        0xad, 0x59, 0x0c, 0xb8, 0x90, 0x80, 0x3f, 0xee, 0x0c, 0x6f, 0xcd, 0x64, 0x1b, 0xce, 0xb3,
        0xa2, 0xa4, 0x91, 0xfc, 0xe2, 0x74, 0xbb, 0xd4, 0xc5, 0xb7, 0x35, 0xc0, 0xe9, 0x12, 0xf2,
        0xab, 0x9c, 0x11, 0xe6, 0xe9, 0xfe, 0x53, 0x7a, 0x95, 0x30, 0x4c, 0xe0, 0x98, 0x26, 0xcd,
        0x62, 0x6b, 0x19, 0x3f, 0x52, 0x72, 0xa6, 0x90, 0x63, 0x2d, 0xab, 0x68, 0xf7, 0x37, 0x3e,
        0x17, 0x7f, 0x4d, 0xce, 0x4b, 0x21, 0x43, 0xe0, 0x48, 0xab, 0x89, 0xb2, 0x08, 0x3f, 0x29,
        0x49, 0xb7, 0x76, 0x11, 0x68, 0x1f, 0xf2, 0x9b, 0x5d, 0x34, 0xf5, 0x0d, 0x61, 0x08, 0x54,
        0x7a, 0x82, 0xda, 0xf1, 0x2d, 0xee, 0x87, 0x91, 0xf8, 0x95, 0xe1, 0x4e, 0xd8, 0x1c, 0x4c,
        0xd5, 0xc3, 0x19, 0x9f, 0x87, 0x8f, 0x24, 0x6a, 0x2b, 0xdd, 0x99, 0xfe, 0x87, 0x0f, 0x54,
        0x67, 0xeb, 0xa3, 0xd5, 0x41, 0x23, 0x0b, 0xd5, 0xe8, 0x48, 0xa2, 0x3a, 0x5c, 0x86, 0xad,
        0x93, 0x0c, 0x65, 0x74, 0x0e, 0x8b, 0x63, 0x29, 0xba, 0x81, 0x79, 0xdc, 0x23, 0x51, 0x1c,
        0x8e, 0x12, 0xc0, 0x86, 0xfa, 0x33, 0xbe, 0x19, 0xed, 0xf1, 0xa2, 0x0f, 0x67, 0x85, 0xf7,
        0xc5, 0xf8, 0xd3, 0x25, 0x7b, 0x90, 0x0c, 0xc5, 0xfd, 0xe6, 0x60, 0xb8, 0x8e, 0xf9, 0x04,
        0x49, 0xc4, 0xc0, 0x1b, 0xad, 0xf6, 0x40, 0x41, 0x02, 0x22, 0x68, 0x40, 0x0a, 0xfd, 0x28,
        0x13, 0xd0, 0xbe, 0xed, 0x1c, 0xea, 0x9d, 0x82, 0x22, 0xca, 0x89, 0xc1, 0x07, 0x90, 0x7c,
        0x7a, 0x66, 0x5c, 0x8e, 0xd2, 0xbf, 0xc7, 0x0f, 0xf5, 0x16, 0xb3, 0x6c, 0x46, 0x87, 0x9f,
        0x2e, 0x7a, 0x6e, 0xd5, 0x73, 0x51, 0x04, 0xa4, 0xc6, 0xdb, 0xd3, 0x58, 0x54, 0xe7, 0x62,
        0xad, 0x6b, 0xe3, 0xc5, 0xed, 0x93, 0xf1, 0x90, 0xa1, 0x1c, 0xd5, 0x92, 0xd3, 0xc2, 0x06,
        0xed, 0x65, 0xd7, 0xc1, 0x6e, 0x01, 0x5f, 0xc1, 0x91, 0xa5, 0x47, 0x4b, 0xec, 0x32, 0x65,
        0x57, 0x0c, 0x10, 0x94, 0xbd, 0x47, 0x2f, 0xc4, 0x46, 0x3f, 0x2d, 0x3b, 0x14, 0x6e, 0x16,
        0x8c, 0xc9, 0xfe, 0x1d, 0xa0, 0xd6, 0x34, 0x87, 0xa5, 0xe1, 0x68, 0x89, 0x76, 0x92, 0xd6,
        0xf8, 0x62, 0x09, 0x1f, 0x36, 0x80, 0x0a, 0x95, 0xba, 0x83, 0xf3, 0x2c, 0xc7, 0x4d, 0xe6,
        0x54, 0x75, 0x9b, 0x2c, 0xf5, 0x00, 0xd1, 0x8f, 0xc7, 0xee, 0x1c, 0xf1, 0xe4, 0x35, 0x8e,
        0x3c, 0x5e, 0x50, 0x66, 0x33, 0x83, 0xff, 0x35, 0xc7, 0x70, 0x19, 0xc6, 0x47, 0x71, 0xc1,
        0x25, 0xef, 0x37, 0x0d, 0x28, 0x7b, 0x27, 0xbc, 0xfe, 0x59, 0x50, 0x44, 0xce, 0xfb, 0x40,
        0x88, 0x3a, 0xa8, 0x03, 0x06, 0x7c, 0xf9, 0x2d, 0x0b, 0x8e, 0x3b, 0x80, 0xb1, 0xf7, 0xd9,
        0x78, 0x2a, 0x42, 0x01, 0x17, 0x04, 0xda, 0x4e, 0x9e, 0xc2, 0x02, 0x7e, 0x95, 0x7c, 0xf6,
        0x83, 0x95, 0x44, 0x39, 0x8c, 0x1e, 0x6b, 0xca, 0xea, 0xa4, 0x85, 0x6f, 0x64, 0x22, 0x08,
        0xd3, 0x8f, 0x29, 0x16, 0x85, 0xa1, 0xf4, 0x15, 0x9d, 0xef, 0xc0, 0x4b, 0x96, 0xcf, 0xe2,
        0xa7, 0x9e, 0x8e, 0x59, 0x9f, 0x42, 0xda, 0x8d, 0x0c, 0x5c, 0xf9, 0xed, 0xce, 0xf6, 0xc5,
        0x03, 0xe8, 0xcc, 0xd8, 0x7e, 0x8f, 0xa8, 0x79, 0xbf, 0xb9, 0xa1, 0x93, 0x1e, 0xe3, 0xc0,
        0x25, 0x82, 0x62, 0x57, 0xab, 0x7a, 0x11, 0x61, 0x79, 0x3f, 0xa3, 0x6b, 0x19, 0xd5, 0x65,
        0x0f, 0x50, 0x8d, 0x7c, 0xf2, 0x17, 0x71, 0x17, 0xe8, 0xbf, 0x84, 0x1b, 0x74, 0x55, 0xbf,
        0xe2, 0xbd, 0xb2, 0x33, 0x4d, 0x07, 0xa6, 0x52, 0xfa, 0x32, 0x02, 0x4c, 0x23, 0xc9, 0x50,
        0xcf, 0x20, 0x99, 0x09, 0xd3, 0x39, 0x5f, 0x01, 0xb2, 0x09, 0xc5, 0x28, 0x23, 0xd8, 0x3a,
        0x09, 0x36, 0x4c, 0x26, 0x85, 0xc9, 0xc8, 0x71, 0x77, 0xa2, 0xed, 0xdb, 0x31, 0xdc, 0xb6,
        0xa4, 0xc6, 0x8d, 0x3f, 0xf4, 0xeb, 0x4d, 0x8f, 0x84, 0xf9, 0x57, 0x72, 0xa6, 0x4c, 0x8d,
        0x6d, 0x6d, 0xc8, 0xe9, 0x4e, 0x4d, 0x0e, 0x60, 0x6c, 0xbf, 0x93, 0x79, 0xb4, 0x34, 0xbf,
        0xb9, 0x69, 0xd1, 0xf5, 0x91, 0x79, 0xb7, 0x00, 0x4e, 0xbd, 0x8d, 0x62, 0xa6, 0x52, 0x54,
        0xd8, 0x3e, 0x7d, 0xce, 0xc8, 0x8b, 0x26, 0xfe, 0xee, 0xc0, 0xb4, 0xdd, 0x5e, 0x7e, 0x2d,
        0x46, 0xb8, 0x6a, 0x13, 0x8f, 0xc2, 0x9d, 0x33, 0x8d, 0x43, 0xcf, 0x5d, 0xbf, 0x8b, 0x99,
        0xe1, 0x1a, 0xf5, 0x15, 0x76, 0x44, 0x93, 0x95, 0x21, 0x48, 0x02, 0x0d, 0x27, 0x2a, 0x44,
        0x42, 0x47, 0x19, 0x41, 0x4f, 0xb4, 0xcf, 0x03, 0x21, 0x4c, 0x67, 0x79, 0x44, 0x67, 0x81,
        0xe9, 0x21, 0x26, 0x38, 0x76, 0xe6, 0xfa, 0x21, 0xe4, 0x80, 0x6c, 0x40, 0x29, 0xf2, 0xc6,
        0x3f, 0xd6, 0xf1, 0xc9, 0x58, 0xd9, 0xbc, 0x46, 0xbb, 0x49, 0xab, 0x1c, 0x2a, 0x7a, 0x91,
        0x8a, 0xbd, 0xd5, 0x5f, 0x00, 0x7c, 0x56, 0xf1, 0x8a, 0xe1, 0xe2, 0xab, 0x7f, 0x29, 0x31,
        0xc7, 0x1b, 0xc4, 0xf5, 0xba, 0xaa, 0xc1, 0x0c, 0x11, 0x37, 0x1a, 0x5b, 0xab, 0x44, 0x99,
        0x5f, 0x3c, 0xd7, 0x1e, 0x85, 0x29, 0x94, 0x59, 0xeb, 0x16, 0x40, 0xfe, 0x3e, 0xee, 0x88,
        0xc1, 0x28, 0x41, 0x34, 0x9e, 0x0d, 0xeb, 0xee, 0xd1, 0x9d, 0xd1, 0xab, 0xa7, 0x75, 0xec,
        0x74, 0x7e, 0xb2, 0x57, 0xaf, 0x43, 0x85, 0x79, 0x92, 0x78, 0x06, 0xa9, 0xab, 0xbe, 0xe8,
        0x55, 0xea, 0xdc, 0x1a, 0xb1, 0x5d, 0x5f, 0xc5, 0x92, 0x0c, 0xef, 0x0d, 0x29, 0x0e, 0x76,
        0x9d, 0xcd, 0xc5, 0xc3, 0x59, 0x26, 0xde, 0x3c, 0xf0, 0x0f, 0x49, 0x67, 0x2d, 0x4e, 0xfc,
        0xe8, 0x7f, 0x93, 0x02, 0xbb, 0x97, 0x3c, 0x0a, 0x80, 0xd9, 0x6a, 0xa6, 0x81, 0x93, 0x0e,
        0x6e, 0x79, 0x44, 0xf8, 0x16, 0xc5, 0x9e, 0x45, 0x4d, 0xa0, 0x27, 0x0e, 0x82, 0x73, 0xa5,
        0x22, 0xd3, 0x7a, 0xe5, 0x9a, 0xee, 0xf1, 0x41, 0x31, 0x6a, 0x26, 0x22, 0x6e, 0xdb, 0x65,
        0xd5, 0x82, 0x22, 0x06, 0x5d, 0xb4, 0x54, 0xf1, 0xe9, 0xc3, 0x49, 0x85, 0x8a, 0xb0, 0x90,
        0x47, 0x0b, 0xa2, 0xcd, 0x0d, 0x1a, 0x04, 0x65, 0x1d, 0x6f, 0xf5, 0x2b, 0xa4, 0xf9, 0x64,
        0x83, 0x48, 0xcb, 0x93, 0x5d, 0x2d, 0x30, 0x80, 0x61, 0x64, 0x79, 0xf7, 0x0c, 0x54, 0xc1,
        0x6f, 0x2c, 0x83, 0xa4, 0xe6, 0x08, 0x8f, 0xa5, 0x8b, 0xdf, 0x81, 0x0c, 0x4a, 0xfd, 0x3f,
        0xe2, 0x27, 0xe7, 0x04, 0x33, 0x76, 0xc8, 0x14, 0x36, 0xde, 0x2a, 0x72, 0x44, 0x0d, 0x15,
        0x5e, 0xe6, 0xfb, 0xcb, 0xf5, 0xe1, 0xcf, 0x48, 0x41, 0x36, 0x17, 0x47, 0xc8, 0xf0, 0x09,
        0xbc, 0xd5, 0x57, 0xe3, 0x70, 0xe6, 0xd2, 0x57, 0x49, 0xd1, 0x5b, 0x5f, 0x8c, 0x8b, 0xbb,
        0x45, 0x83, 0x5e, 0x82, 0xc6, 0x33, 0x7b, 0x60, 0x1e, 0x09, 0x97, 0xc2, 0x0c, 0x55, 0x28,
        0xc8, 0x74, 0x72, 0xeb, 0x2b, 0xcb, 0x8d, 0x45, 0xf2, 0x64, 0x6e, 0x67, 0x91, 0x63, 0x59,
        0x50, 0x01, 0xdb, 0x13, 0xcf, 0x85, 0xd2, 0x63, 0xd7, 0xab, 0x57, 0x1b, 0x88, 0xb7, 0xba,
        0x9d, 0x09, 0x80, 0x15, 0x9b, 0x4b, 0xfd, 0x1a, 0x36, 0xe6, 0x18, 0x8e, 0x12, 0x4d, 0xf5,
        0xc1, 0xfd, 0x57, 0x1e, 0x32, 0x7c, 0x80, 0x8c, 0x06, 0x66, 0xd0, 0x79, 0xb6, 0x76, 0x72,
        0x28, 0x11, 0x1e, 0xc6, 0x59, 0x29, 0x89, 0x97, 0xc2, 0x30, 0x32, 0x56, 0x70, 0x76, 0x49,
        0x10, 0x05, 0x70, 0xb3, 0x2b, 0x7a, 0xa5, 0xf8, 0x56, 0x2f, 0x9d, 0x34, 0xc7, 0x6c, 0x0b,
        0x1e, 0x5b, 0x15, 0x03, 0x5c, 0x9f, 0x71, 0x53, 0x5d, 0x31, 0x96, 0x31, 0x7d, 0x77, 0x84,
        0x5b, 0xad, 0xf5, 0x6e, 0x34, 0xd1, 0x4f, 0x9d, 0x72, 0xb6, 0xa3, 0x43, 0xbb, 0x92, 0xd6,
        0xfc, 0x39, 0x83, 0xe5, 0x36, 0x9f, 0xf2, 0x3b, 0x41, 0x4b, 0x59, 0x8e, 0x40, 0xc6, 0xa0,
        0xca, 0x74, 0x60, 0xb7, 0x0c, 0x84, 0x04, 0x46, 0xee, 0x30, 0x76, 0xd8, 0x81, 0xeb, 0xed,
        0x31, 0x4b, 0xbf, 0xc3, 0x36, 0x70, 0xfc, 0x69, 0xfd, 0xcb, 0x84, 0x36, 0x6d, 0xd7, 0xf2,
        0xd6, 0xb9, 0x64, 0xf9, 0xd5, 0xa1, 0xd6, 0xb3, 0x02, 0x72, 0x07, 0xf6, 0x7e, 0xc2, 0xc9,
        0xaa, 0x0d, 0x55, 0x70, 0x38, 0xbb, 0x54, 0x1a, 0x34, 0x88, 0xe3, 0xe8, 0x68, 0xd6, 0x06,
        0x31, 0x4d, 0xff, 0x66, 0xad, 0xbc, 0x13, 0x35, 0x1a, 0xde, 0x6d, 0xe9, 0x25, 0x69, 0x00,
        0x90, 0xbb, 0x80, 0xf4, 0xb7, 0x0c, 0x2f, 0x42, 0xab, 0x9b, 0x75, 0xb5, 0x21, 0x9b, 0x43,
        0xaf, 0x56, 0xf6, 0x5b, 0x6f, 0x2f, 0xb1, 0xae, 0xe6, 0x3d, 0xa1, 0x82, 0xfe, 0xdf, 0x81,
        0x0c, 0xca, 0xb1, 0x91, 0xf3, 0xdb, 0x97, 0xfb, 0xdf, 0x58, 0x4d, 0x11, 0xb1, 0x4b, 0x47,
        0x92, 0x65,
    ];
    // 也是随便复制的一个TCP包
    let pkt3 = [
        0x17, 0x03, 0x03, 0x01, 0x32, 0x68, 0xe7, 0x0d, 0x7a, 0x50, 0x17, 0x9b, 0xdd, 0x3d, 0x1f,
        0xdb, 0x54, 0x6e, 0xa4, 0x5e, 0x5f, 0x94, 0x11, 0x5a, 0x76, 0xd2, 0x1f, 0x57, 0xcc, 0xde,
        0x53, 0x64, 0x8f, 0xda, 0xea, 0x98, 0x49, 0x03, 0xdd, 0x3b, 0xd5, 0x7a, 0xf8, 0x0f, 0x78,
        0x4b, 0x2d, 0xe0, 0x8d, 0x31, 0xe7, 0x4a, 0x6f, 0xc8, 0x61, 0x35, 0x22, 0xbc, 0xae, 0x1e,
        0x31, 0x2c, 0x7f, 0x0d, 0xf9, 0xac, 0x16, 0x2c, 0x66, 0x34, 0xcb, 0x26, 0x9e, 0x20, 0x5a,
        0x1d, 0x29, 0x74, 0x35, 0x14, 0xc1, 0x7e, 0x70, 0xfd, 0x18, 0x1a, 0x66, 0xaa, 0x5d, 0x1c,
        0x23, 0xde, 0x1d, 0xec, 0xf9, 0x19, 0x85, 0x3f, 0x94, 0xe1, 0x7b, 0xfd, 0x40, 0xb1, 0x3d,
        0x9e, 0x74, 0x43, 0x64, 0x4b, 0xf6, 0xcc, 0xa6, 0xa0, 0xb6, 0x92, 0x88, 0x0b, 0x59, 0x65,
        0x77, 0xa9, 0xb9, 0x46, 0x19, 0xfc, 0xef, 0x7d, 0x2e, 0x7b, 0x41, 0x37, 0xe6, 0xcb, 0x87,
        0xf5, 0x71, 0x65, 0x73, 0x2a, 0x54, 0x66, 0x91, 0xab, 0x2f, 0xc8, 0x22, 0xcc, 0x3e, 0xb9,
        0xc6, 0xcc, 0x7c, 0x72, 0xb1, 0x1d, 0xc2, 0xfe, 0xb1, 0xe7, 0xb5, 0xa7, 0xc4, 0x14, 0x1e,
        0x3c, 0x67, 0x93, 0xad, 0x0a, 0x79, 0x57, 0xf5, 0xdb, 0x55, 0x71, 0x1a, 0x0c, 0xec, 0x75,
        0x80, 0x3b, 0xb3, 0x64, 0x09, 0x23, 0x03, 0x6d, 0xf1, 0x9f, 0x53, 0x52, 0xf9, 0x3a, 0xff,
        0xea, 0x1b, 0x65, 0xcb, 0x31, 0x6f, 0xec, 0x7d, 0xef, 0xbe, 0x66, 0x1c, 0x0c, 0x3e, 0xf7,
        0x4e, 0x57, 0xb5, 0x97, 0x3a, 0xb4, 0x2f, 0x2e, 0x48, 0x58, 0x0e, 0xb4, 0x06, 0x99, 0x3b,
        0x07, 0x79, 0xbc, 0x6b, 0xcc, 0xf2, 0x93, 0xdf, 0x0b, 0x68, 0xa9, 0x97, 0x00, 0x63, 0x8d,
        0x44, 0x71, 0xd5, 0x13, 0x1f, 0x44, 0xf6, 0x57, 0x34, 0x94, 0x03, 0x05, 0xef, 0x4d, 0xd6,
        0x3e, 0x31, 0xc2, 0xed, 0x4a, 0xa4, 0xc0, 0xae, 0xe1, 0x74, 0x24, 0xb3, 0xb7, 0x4a, 0xb3,
        0xe0, 0x89, 0x26, 0x83, 0x44, 0xc7, 0x36, 0xf6, 0x56, 0xfe, 0xeb, 0x81, 0xd9, 0x12, 0x84,
        0x61, 0xdd, 0x6d, 0xfe, 0xbe, 0xfa, 0x44, 0x5f, 0x30, 0x7d, 0xfe, 0x3c, 0x92, 0x9c, 0xab,
        0x31, 0x50, 0xf1, 0xd2, 0x5c, 0xd4, 0x70, 0x90, 0x4c, 0x00, 0xa8, 0x17, 0x03, 0x03, 0x00,
        0x86, 0xad, 0x6d, 0x6a, 0x03, 0x8e, 0x38, 0x69, 0xb9, 0x16, 0x46, 0x38, 0x5a, 0x55, 0x1c,
        0x28, 0xd7, 0x4c, 0x64, 0xb5, 0x2e, 0x3f, 0x96, 0xcb, 0x30, 0xed, 0x1c, 0xdc, 0x47, 0x3b,
        0x14, 0x03, 0xc3, 0xe6, 0x86, 0x83, 0x10, 0x2a, 0xe6, 0xf2, 0x32, 0xfa, 0x5d, 0xb9, 0x68,
        0x6f, 0xb3, 0xbd, 0x95, 0xd6, 0xa3, 0x57, 0x22, 0x4b, 0x33, 0xcc, 0x4f, 0xc3, 0x67, 0xbc,
        0xe3, 0x5a, 0xdb, 0xaf, 0x5d, 0xa2, 0xca, 0x47, 0x0b, 0xc7, 0xa8, 0xf6, 0x2c, 0xb4, 0x14,
        0xe3, 0x54, 0x0a, 0x84, 0xd7, 0x7c, 0x49, 0x75, 0x97, 0xf8, 0xbd, 0x09, 0x22, 0x04, 0x87,
        0xbb, 0xb4, 0x8d, 0x46, 0xe1, 0x16, 0x51, 0xc6, 0xc9, 0x1d, 0x26, 0xd1, 0x25, 0xf2, 0x60,
        0xb5, 0x32, 0xe2, 0x59, 0xef, 0x02, 0xc5, 0x75, 0x86, 0x4d, 0x83, 0xc0, 0xfc, 0x24, 0x77,
        0x19, 0xd4, 0x76, 0xc6, 0xe2, 0xc6, 0xad, 0x57, 0x94, 0x75, 0xdb, 0xd6, 0xc4, 0xf8, 0x31,
    ];
    // 这里是一个合法的SomeIP包
    let pkt4 = [
        0x10, 0x4a, 0x90, 0x0b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0xa7, 0x00, 0x01, 0x01, 0x02,
        0x00, 0x01, 0x10, 0x4a, 0x90, 0x0d, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0xa7, 0x01, 0x01,
        0x01, 0x02, 0x00, 0x01,
    ];
    // 这里也是一个合法的SomeIP包
    let pkt5 = [
        0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x05, 0x74, 0x00, 0x00, 0x0c, 0xbe, 0x01, 0x01, 0x02,
        0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xa0, 0x01, 0x00, 0x00, 0x10, 0x10, 0xc8,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10,
        0xd0, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x10, 0xd2, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x10, 0xd3, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,
        0x00, 0x10, 0x10, 0xd4, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x02, 0x00, 0x10, 0x10, 0xd5, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x03, 0x00, 0x10, 0x10, 0xd8, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x04, 0x00, 0x10, 0x10, 0xd9, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x05, 0x00, 0x10, 0x10, 0xda, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x06, 0x00, 0x10, 0x10, 0xdc, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x07, 0x00, 0x10, 0x10, 0xdd, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe0, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe1, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe6, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe8, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xe9,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10,
        0xea, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x10, 0xeb, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x10, 0xec, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x10, 0xed, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x08, 0x00, 0x10, 0x10, 0xee, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x09, 0x00, 0x10, 0x10, 0xef, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf0, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf1, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf2, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x0a, 0x00, 0x10, 0x10, 0xf4, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0b, 0x00, 0x10, 0x10, 0xf5, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0c, 0x00, 0x10, 0x10, 0xf6, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf7, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0d, 0x00, 0x10, 0x10, 0xf8, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x10, 0xf9,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0e, 0x00, 0x10, 0x10,
        0xfa, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x10, 0xfb, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x0f, 0x00,
        0x10, 0x10, 0xfc, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x11, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x11, 0x03, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x11, 0x04, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0c, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0d, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0e, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x0f, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x10, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x11, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x12, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x13,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18,
        0x14, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x18, 0x15, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x18, 0x16, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x18, 0x17, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x18, 0x18, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x18, 0x19, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x1a, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x1b, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x21, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x2d, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x2e, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x30, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x3c, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x48, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0x4b,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x18,
        0x56, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10,
        0x18, 0x57, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x10, 0x18, 0x59, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x10, 0x18, 0x6c, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x10, 0x18, 0x6f, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x10, 0x18, 0x88, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x01, 0x01, 0x00, 0x00, 0x10, 0x18, 0xe1, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x02, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x04, 0x00, 0x01, 0x01, 0x00, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x06, 0x00, 0x01, 0x01, 0x00, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x09, 0x00, 0x01, 0x01, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x0a, 0x00, 0x01, 0x01,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x10, 0x20, 0x0c, 0x00, 0x01,
        0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x09, 0x04,
        0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0x77, 0x2a, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10,
        0x42, 0x4f, 0x00, 0x11, 0xc3, 0xb0, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00,
        0x11, 0xc3, 0xb1, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0x77, 0x25,
        0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0xe3, 0x00, 0x09, 0x04,
        0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0xe2, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10,
        0x42, 0x4f, 0x00, 0x06, 0x77, 0x45, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00,
        0x06, 0x77, 0x44, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0xe5,
        0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x06, 0xc4, 0x3a, 0x00, 0x09, 0x04,
        0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0x3d, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10,
        0x42, 0x4f, 0x00, 0x11, 0xc4, 0x3e, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00,
        0x11, 0xc4, 0x3b, 0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0xc4, 0x3c,
        0x00, 0x09, 0x04, 0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x06, 0x77, 0x67, 0x00, 0x09, 0x04,
        0x00, 0xac, 0x10, 0x42, 0x4f, 0x00, 0x11, 0x77, 0x67,
    ];
    println!("pkt1 is_someip?:{:?}", SomeipPacket::new(&pkt1));
    println!("pkt2 is_someip?:{:?}", SomeipPacket::new(&pkt2));
    println!("pkt3 is_someip?:{:?}", SomeipPacket::new(&pkt3));
    println!("pkt4 is_someip?:{:?}", SomeipPacket::new(&pkt4));
    println!("pkt5 is_someip?:{:?}", SomeipPacket::new(&pkt5));
}
